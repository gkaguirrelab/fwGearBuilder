#!/anaconda3/bin/python3

import os, json, nilearn
import nibabel as nb
import matplotlib.pyplot as plt
import hcp_utils as hcp
from map_fs2gifti import map_fs2gifti
from map_vol2fs import map_vol2fs
from locate_file import locate_file
from nilearn import plotting 

###################### Define the Paths and parameters ###########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
freesurfer_subject_dir = '/freesurfer/subjects'
os.system('mkdir %s'%first_output_dir)
freesurfer_environment_path = 'export FREESURFER_HOME=/freesurfer;/bin/bash -c \'source $FREESURFER_HOME/FeeSurferEnv.sh &>/dev/null\';export SUBJECTS_DIR=%s;/freesurfer/bin/' % freesurfer_subject_dir

#Install bc and gcc
os.system('apt-get update')
os.system('apt-get install -y build-essential')
os.system('apt-get install bc')

################### Parse config ##############################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

imageName = config['imageName']
saveCiftifyStructure = config['saveCiftifyStructure']
outputDiagnosticForAllTasks = config['outputDiagnosticForAllTasks']
FSsurfaceTemplate = config['FSsurfaceTemplate']

################### Set path to input ##############################

inputImageOrArchive_path = os.path.join(flywheel_base, 'input/inputImageOrArchive/')
zippedReconAll_path = os.path.join(flywheel_base, 'input/zippedReconAll/')

## Get the input image ##
inputImageOrArchive = os.path.join(inputImageOrArchive_path, os.listdir(inputImageOrArchive_path)[0])
inputImage = []
# Single image case
if os.path.splitext(inputImageOrArchive)[1] == '.gz' or os.path.splitext(inputImageOrArchive)[1] == '.nii':
    inputImage.append(inputImageOrArchive)
# Input is archive
elif os.path.splitext(inputImageOrArchive)[1] == '.zip':
    unzipped_file_path = os.path.join('/opt', 'unzipped_files')
    os.system('unzip -q %s -d %s' % (inputImageOrArchive, unzipped_file_path))
    if imageName == 'all':
        for image in os.listdir(unzipped_file_path):
            inputImage.append(os.path.join(unzipped_file_path, image))         
    else:
        inputImage = locate_file(imageName, unzipped_file_path)
else:
    raise RuntimeError('Image input is not a zip or nifti. Type unrecognized.')

## Get the images that will be processed in the same location
images_to_process = os.path.join('/opt/images_to_process')
os.system('mkdir %s' % images_to_process)
for rawimage in inputImage:
    os.system('cp %s %s/' % (rawimage, images_to_process))

## Get the recon-all.
if os.path.exists(zippedReconAll_path):
    zippedReconAll = os.path.join(zippedReconAll_path, os.listdir(zippedReconAll_path)[0])
    unzipped_recon_all = os.path.join(zippedReconAll_path, 'unzipped_recon_all')
    os.system('unzip -q %s -d %s'%(zippedReconAll, unzipped_recon_all))
    subject_name = os.listdir(unzipped_recon_all)[0]
    os.system('mv %s/* %s/%s' % (unzipped_recon_all, freesurfer_subject_dir, subject_name))
    unzipped_recon_all = os.path.join(freesurfer_subject_dir, subject_name)
else:
    raise RuntimeError('There is no recon all archive !')

## Unzip the surface meshes     
standard_mesh_path = '/standard_mesh_atlases'
standard_meshes = '/tmp/standard_mesh_atlases'
os.system('unzip -q %s -d /tmp' % standard_mesh_path)

################## Run Algorithm ################################

# Run ciftify recon-all
ciftify_work_dir = '/hcp_dir/'
os.system('mkdir %s' % ciftify_work_dir)
ciftify_recon_run = '%s;export PATH="/freesurfer/bin:$PATH";export PATH="/anaconda3/bin:$PATH";FSLDIR=/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;ciftify_recon_all --ciftify-work-dir %s --fs-subjects-dir %s --surf-reg FS --fs-license /freesurfer/license.txt --n_cpus 2 --verbose %s' % (freesurfer_environment_path, ciftify_work_dir, freesurfer_subject_dir, subject_name)
os.system(ciftify_recon_run)

for i in os.listdir(images_to_process):
    path_to_i = os.path.join(images_to_process, i)
    
    # Get the image name for ciftify folder name 
    name_without_path = os.path.split(path_to_i)[1]
    task_name = os.path.splitext(name_without_path)[0]
    if task_name[-3:] == 'nii':
        task_name = 'task_' + task_name[:-4]
       
    # Create the folder structure 
    main_task_folder = os.path.join(first_output_dir, task_name)
    freesurfer_surface_folder = os.path.join(first_output_dir, main_task_folder, 'freesurfer')
    freesurfer_surface_native = os.path.join(freesurfer_surface_folder, 'native')
    freesurfer_surface_fs = os.path.join(freesurfer_surface_folder, 'fsaverage')    
    gifti_surface_folder = os.path.join(first_output_dir, main_task_folder, 'giftiFSLR_32k')
    cifti_surface_folder = os.path.join(first_output_dir, main_task_folder, 'ciftiFSLR_32k')
    os.system('mkdir %s %s %s %s %s %s' % (main_task_folder, freesurfer_surface_folder, 
                                            freesurfer_surface_native, freesurfer_surface_fs,
                                            gifti_surface_folder, cifti_surface_folder))
          
    # Get the image type
    image = nb.load(path_to_i)
    image_type = str(type(image))[16:21]
    
    if image_type == 'nifti': 
        native_left, native_right, fsaverage_left, fsaverage_right = map_vol2fs(path_to_i, 
                                                                                freesurfer_subject_dir, 
                                                                                subject_name, 
                                                                                freesurfer_environment_path,
                                                                                freesurfer_surface_native,
                                                                                freesurfer_surface_fs, 
                                                                                FSsurfaceTemplate)  
        
        # Map surfaces to gifti FSLR
        if native_left[-3:] == 'mgz':
            fmri_name_left = os.path.split(native_left)[1]
            fmri_name_right = os.path.split(native_right)[1]
            fmri_name_left = fmri_name_left[:-4]
            fmri_name_right = fmri_name_right[:-4]
        
        print(fmri_name_left)
        
        gifti_converted_nat_left = os.path.join(first_output_dir, fmri_name_left + '.gii')
        gifti_converted_nat_right = os.path.join(first_output_dir, fmri_name_right + '.gii')
        convert_left = 'export PATH="/freesurfer/bin:$PATH";%s %s %s' % (os.path.join(freesurfer_environment_path, 'mri_convert.bin'),
                                                                          native_left, gifti_converted_nat_left)
        convert_right = 'export PATH="/freesurfer/bin:$PATH";%s %s %s' % (os.path.join(freesurfer_environment_path, 'mri_convert.bin'),
                                      native_right, gifti_converted_nat_right)
        os.system(convert_left)
        os.system(convert_right)
        
        workbench_path = '/usr/bin/'
        metric_out_left, metric_out_right = map_fs2gifti(gifti_converted_nat_left, gifti_converted_nat_right, workbench_path, os.path.join(freesurfer_subject_dir, subject_name), standard_meshes, first_output_dir, freesurfer_environment_path, source_space='native', resolution='32k')
        os.system('cp %s %s' % (metric_out_left, gifti_surface_folder))
        os.system('cp %s %s' % (metric_out_right, gifti_surface_folder))
        
        # Run ciftify and map to cifti FSLR
        ciftify_dtseries_run = '%s;export PATH="/freesurfer/bin:$PATH";export PATH="/anaconda3/bin:$PATH";FSLDIR=/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;ciftify_subject_fmri --surf-reg FS --ciftify-work-dir %s %s %s %s -v' % (freesurfer_environment_path, ciftify_work_dir, path_to_i, subject_name, task_name)
        os.system(ciftify_dtseries_run)
        os.system('cp %s %s/' % (os.path.join(ciftify_work_dir, subject_name, 'MNINonLinear', 'Results', task_name, '%s_Atlas_s0.dtseries.nii' % task_name), cifti_surface_folder))
        ciftify_visualization_command = '%s;export PATH="/freesurfer/bin:$PATH";export PATH="/anaconda3/bin:$PATH";FSLDIR=/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;cifti_vis_fmri subject --ciftify-work-dir %s %s %s' % (freesurfer_environment_path, ciftify_work_dir, task_name, subject_name)
        os.system(ciftify_visualization_command)    
        
        # Zip results
        os.system('cd %s; zip -r -q %s *' % (main_task_folder, os.path.join(final_output_dir, '%s_surfaces.zip' % task_name)))
########################### Plot new maps ####################################
#### This is still in the loop ####
        # Empty folder for images
        images_main = '/tmp/%s_images_folder' % task_name
        os.system('mkdir %s' % images_main)
        images = os.path.join(images_main, 'images')
        os.system('mkdir %s' % images)
            
        # Load the giftis and plot
        fig1 = plt.figure(figsize=[11,6])
        fig2 = plt.figure(figsize=[11,6])
        fig3 = plt.figure(figsize=[11,6])
        fig4 = plt.figure(figsize=[11,6])
        
        gifti_left = nb.load(metric_out_left)
        gifti_right = nb.load(metric_out_right)
        gifti_left_data = gifti_left.darrays[0].data
        gifti_right_data = gifti_right.darrays[0].data
        
        plotting.plot_surf(hcp.mesh.inflated_left, gifti_left_data, bg_map=hcp.mesh.sulc_left,
                            hemi='left',view='medial', colorbar=True, cmap='hot', title='gifti left',
                            cbar_vmin=min(gifti_left_data), cbar_vmax=max(gifti_left_data), figure=fig1,
                            output_file=os.path.join(images, 'med_gifti_left.png'))
        plotting.plot_surf(hcp.mesh.inflated_left, gifti_left_data, bg_map=hcp.mesh.sulc_left,
                            hemi='left',view='lateral', colorbar=True, cmap='hot', title='gifti left',
                            cbar_vmin=min(gifti_left_data), cbar_vmax=max(gifti_left_data), figure=fig2,
                            output_file=os.path.join(images, 'lat_gifti_left.png'))        
        plotting.plot_surf(hcp.mesh.inflated_right, gifti_right_data, bg_map=hcp.mesh.sulc_right,
                            hemi='right',view='medial', colorbar=True, cmap='hot', title='gifti right',
                            cbar_vmin=min(gifti_right_data), cbar_vmax=max(gifti_right_data), figure=fig3,
                            output_file=os.path.join(images, 'med_gifti_right.png'))   
        plotting.plot_surf(hcp.mesh.inflated_right, gifti_right_data, bg_map=hcp.mesh.sulc_right,
                            hemi='right',view='lateral', colorbar=True, cmap='hot', title='gifti right',
                            cbar_vmin=min(gifti_right_data), cbar_vmax=max(gifti_right_data), figure=fig4,
                            output_file=os.path.join(images, 'lat_gifti_right.png'))          
        
        # Plot native fs images 
        fig5 = plt.figure(figsize=[11,6])
        fig6 = plt.figure(figsize=[11,6])
        fig7 = plt.figure(figsize=[11,6])
        fig8 = plt.figure(figsize=[11,6])
        
        left_map_native = nilearn.surface.load_surf_data(native_left)
        right_map_native = nilearn.surface.load_surf_data(native_right)
        if len(left_map_native.shape) != 1:
            left_map_native = left_map_native[:,0]
            right_map_native = right_map_native[:,0]
        
        left_inflated_native = nilearn.surface.load_surf_mesh(os.path.join(freesurfer_subject_dir, subject_name, 'surf', 'lh.inflated'))
        right_inflated_native = nilearn.surface.load_surf_mesh(os.path.join(freesurfer_subject_dir, subject_name, 'surf', 'rh.inflated'))
        left_sulc_native = os.path.join(freesurfer_subject_dir, subject_name, 'surf', 'lh.sulc')
        right_sulc_native = os.path.join(freesurfer_subject_dir, subject_name, 'surf', 'rh.sulc')
        
        plotting.plot_surf(left_inflated_native, left_map_native, bg_map=left_sulc_native,
                            hemi='left',view='medial', colorbar=True, cmap='hot', title='FSnat left',
                            cbar_vmin=min(left_map_native), cbar_vmax=max(left_map_native), figure=fig5,
                            output_file=os.path.join(images, 'med_FSnat_left.png'))
        plotting.plot_surf(left_inflated_native, left_map_native, bg_map=left_sulc_native,
                            hemi='left',view='lateral', colorbar=True, cmap='hot', title='FSnat left',
                            cbar_vmin=min(left_map_native), cbar_vmax=max(left_map_native), figure=fig6,
                            output_file=os.path.join(images, 'lat_FSnat_left.png'))      
        plotting.plot_surf(right_inflated_native, right_map_native, bg_map=right_sulc_native,
                            hemi='right',view='medial', colorbar=True, cmap='hot', title='FSnat right',
                            cbar_vmin=min(right_map_native), cbar_vmax=max(right_map_native), figure=fig7,
                            output_file=os.path.join(images, 'med_FSnat_right.png'))
        plotting.plot_surf(right_inflated_native, right_map_native, bg_map=right_sulc_native,
                            hemi='right',view='lateral', colorbar=True, cmap='hot', title='FSnat right',
                            cbar_vmin=min(right_map_native), cbar_vmax=max(right_map_native), figure=fig8,
                            output_file=os.path.join(images, 'lat_FSnat_right.png'))
  
        # Plot fsaverage fs images 
        fig9 = plt.figure(figsize=[11,6])
        fig10 = plt.figure(figsize=[11,6])
        fig11 = plt.figure(figsize=[11,6])
        fig12 = plt.figure(figsize=[11,6])
        
        left_map_fs = nilearn.surface.load_surf_data(fsaverage_left)
        right_map_fs = nilearn.surface.load_surf_data(fsaverage_right)
        if len(left_map_fs.shape) != 1:
            left_map_fs = left_map_fs[:,0]
            right_map_fs = right_map_fs[:,0]
        
        left_inflated_fs = nilearn.surface.load_surf_mesh(os.path.join(freesurfer_subject_dir, 'fsaverage', 'surf', 'lh.inflated'))
        right_inflated_fs = nilearn.surface.load_surf_mesh(os.path.join(freesurfer_subject_dir, 'fsaverage', 'surf', 'rh.inflated'))
        left_sulc_fs = os.path.join(freesurfer_subject_dir, 'fsaverage', 'surf', 'lh.sulc')
        right_sulc_fs = os.path.join(freesurfer_subject_dir, 'fsaverage', 'surf', 'rh.sulc')

        plotting.plot_surf(left_inflated_fs, left_map_fs, bg_map=left_sulc_fs,
                            hemi='left',view='medial', colorbar=True, cmap='hot', title='FSavg left',
                            cbar_vmin=min(left_map_fs), cbar_vmax=max(left_map_fs), figure=fig9,
                            output_file=os.path.join(images, 'med_FSavg_left.png'))
        plotting.plot_surf(left_inflated_fs, left_map_fs, bg_map=left_sulc_fs,
                            hemi='left',view='lateral', colorbar=True, cmap='hot', title='FSavg left',
                            cbar_vmin=min(left_map_fs), cbar_vmax=max(left_map_fs), figure=fig10,
                            output_file=os.path.join(images, 'lat_FSavg_left.png'))      
        plotting.plot_surf(right_inflated_fs, right_map_fs, bg_map=right_sulc_fs,
                            hemi='right',view='medial', colorbar=True, cmap='hot', title='FSavg right',
                            cbar_vmin=min(right_map_fs), cbar_vmax=max(right_map_fs), figure=fig11,
                            output_file=os.path.join(images, 'med_FSavg_right.png'))
        plotting.plot_surf(right_inflated_fs, right_map_fs, bg_map=right_sulc_fs,
                            hemi='right',view='lateral', colorbar=True, cmap='hot', title='FSavg right',
                            cbar_vmin=min(right_map_fs), cbar_vmax=max(right_map_fs), figure=fig12,
                            output_file=os.path.join(images, 'lat_FSavg_right.png'))
    
        os.system('cp %s/* %s/' % (os.path.join(ciftify_work_dir, 'qc_fmri', '%s_%s' % (subject_name, task_name)), images))

        # Make html
        html_file = open('%s/index.html' % images_main,'w')
        html_content = '''
        <h1>FS Native surface</h1>
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_lateral">   
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_medial">
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_medial">
        <p style="clear: both;">
        <h1>Fsaverage surface</h1>
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_lateral">   
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_medial">
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_medial">
        <p style="clear: both;">
        <h1>Gifti FSLR surface</h1>
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_lateral">   
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_medial">
        <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_medial">
        <p style="clear: both;">   
        <h1>ciftify - Pial Surface Overlayed on Mean Functional Image</h1>
        <img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="pialonfunc">
        <img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="pialonfunc">
        <img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="pialonfunc">
        <p style="clear: both;">   
        <h1>ciftify - Intensity of the resampled subcortical fMRI data (1st TR), Unsmoothed</h1>
        <img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="intensity Subcort">
        <p style="clear: both;">   
        <h1>ciftify - Intensity of the Projected fMRI data (1st TR), Unsmoothed</h1>
        <img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="fmri">
        <img src="./%s" style="float: left; width: 50%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="fmri">
        <p style="clear: both;">   
        <h1>ciftify - Correlation with partietal seed (Dorsal Attention Network) - Smoothed with 4mm FWHM</h1>
        <img src="./%s" style="float: left; width: 90%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="partietal corr">
        <p style="clear: both;">    
        <h1>ciftify - Correlation with precuneus seed (Default Mode Network) - Smoothed with 4mm FWHM - Smoothed with 4mm FWHM</h1>
        <img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="precuneus corr">
        <p style="clear: both;">   
        <h1>ciftify - Correlation with insula seed (Salience Network) - Smoothed with 4mm FWHM</h1>
        <img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="insula corr">
        <p style="clear: both;">   
        ''' % ('images/med_FSnat_left.png', 'images/med_FSnat_right.png', 'images/lat_FSnat_left.png', 'images/lat_FSnat_right.png', 
                'images/med_FSavg_left.png', 'images/med_FSavg_right.png', 'images/lat_FSavg_left.png', 'images/lat_FSavg_right.png', 
                'images/med_gifti_left.png', 'images/med_gifti_right.png', 'images/lat_gifti_left.png', 'images/lat_gifti_right.png',
                'images/PialRegCor.png', 'images/PialRegAx.png', 'images/PialRegSag.png', 'images/fmri_Subcortical.png',
                'images/fmri_LM.png', 'images/fmri_DV.png', 'images/DAN_conn.png', 'images/DMN_conn.png', 'images/SAL_conn.png')
            
        html_file.write(html_content)
        html_file.close()
        if outputDiagnosticForAllTasks:
            os.system('cd %s; zip -r -q %s *' % (images_main, os.path.join(final_output_dir, '%s_diagnostics.html.zip' % task_name)))
    else:
        raise RuntimeError('The image you have is not a nifti image. Currently, only volumetric to surface mapping is supported')
        
################## Zip the surfaces and output ##################################
if not outputDiagnosticForAllTasks:
    os.system('cd %s; zip -r -q %s *' % (images_main, os.path.join(final_output_dir, '%s_diagnostics.html.zip' % task_name)))

if saveCiftifyStructure:
    os.system('cd %s; zip -r -q %s *' % (ciftify_work_dir, os.path.join(final_output_dir, '%s_ciftify_folders.zip' % subject_name)))
    