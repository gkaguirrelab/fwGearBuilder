#!/usr/local/bin/python3.7

import os
# os.system('pip3 install \'hcp-utils==0.1.0\' \'pandas==1.0.3\'')
# import hcp_utils
import json

# Some of the libraries supplied by MATLAB runtime are old and runtime prioritize them over system libraries. So we rename them and make runtime use the system libraries instead
os.system("mv /usr/local/MATLAB/MATLAB_Runtime/v98/bin/glnxa64/libexpat.so.1 /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libexpat.so.1-appended")
os.system("mv /usr/local/MATLAB/MATLAB_Runtime/v98/bin/glnxa64/libtiff.so.5 /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libtiff.so.5-appended")

# Print the system specs in the log file
os.system('cat /proc/cpuinfo')

# Set initial Flywheel paths
flywheel_base ='/flywheel/v0/'
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput' # Working in the flywheel output folder might cause issues so creating a first level output folder 
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')

# Set paths to the functions
matlab_func = '/opt/func_input/run_mainWrapper.sh'
externalMGZMakerPath = '/opt/make_fsaverage.py'
externalMapGifMakerPath = '/opt/plot_maps.py'
externalSurfaceMakerPath = '/opt/plot_surface.py'
externalCiftiSurfaceMakerPath = '/opt/plot_cifti_maps.py'
externalHtmlMakerPath = '/opt/ldog_make_html.py'
externalCiftiToFreesurferPath = '/opt/cifti_to_freesurfer.py'

# Set paths to the tools 
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v98' #path to MATLAB runtime
workbench_path = '/usr/bin/wb_command'
freesurferInstallationPath = '/freesurfer'
standardMeshAtlasesFolder = '/opt/standard_mesh_atlases'

# External workdir (required for the cifti_to_freesurfer
external_workdir = '/external_workdir'
os.system('mkdir %s' % external_workdir)
###################Parse Config Here###########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

dataFileType = config['dataFileType']
dataSourceType = config['dataSourceType']
trimDummyStimTRs = config['trimDummyStimTRs']
averageAcquisitions = config['averageAcquisitions']
tr = config['tr']
modelClass = config['modelClass']
averageVoxels = config['averageVoxels']
modelOpts = '{' + config['modelOpts'] + '}'
padTruncatedTRs = config['padTruncatedTRs']
pseudoHemiAnalysis = config['pseudoHemiAnalysis']
convertToPercentChange = config['convertToPercentChange']

################### Input Files ###############################################

# Get the input images
func_images = []
for i in range(36):
    image_number = i+1  
    if image_number < 10: 
        image_number_string = '0' + str(image_number)
    else:
        image_number_string = str(image_number)  

    image_path_and_name = os.path.join(flywheel_base, 'input', 'funcZip%s' % image_number_string) 
    if os.path.exists(image_path_and_name):
        main_image = os.path.join(image_path_and_name, os.listdir(image_path_and_name)[0])
        func_images.append(main_image)
    else:
        func_images.append('Na')

# Path to input folders 
stim_file_folder = os.path.join(flywheel_base, 'input/stimFile')
struct_zip_folder = os.path.join(flywheel_base, 'input/structZip')
mask_file_folder = os.path.join(flywheel_base, 'input/maskFile')
payload_file_folder = os.path.join(flywheel_base, 'input/payloadFile')

# Path to stimulus
stim_file_path = os.path.join(stim_file_folder, os.listdir(stim_file_folder)[0])

# Path to optional inputs   
if os.path.isdir(struct_zip_folder) == True:   
    struct_zip_path = os.path.join(struct_zip_folder, os.listdir(struct_zip_folder)[0])
else:
    struct_zip_path = 'Na'
if os.path.isdir(mask_file_folder) == True:    
    mask_file_path = os.path.join(mask_file_folder, os.listdir(mask_file_folder)[0])
else:
    mask_file_path = 'Na'
if os.path.isdir(payload_file_folder) == True:    
    payload_file_path = os.path.join(mask_file_folder, os.listdir(payload_file_folder)[0])
else:
    payload_file_path = 'Na'


if dataSourceType == 'icafix':
    # Create a folder for hcpstruct config
    hcpconfpath = '/opt/hcpconf'
    os.system('mkdir %s' % hcpconfpath)
    
    # Extract the hcp config into the configfolder
    os.system('unzip -j %s \'*/*.json\' -d %s' % (struct_zip_path, hcpconfpath))
    
    hcpconfig = os.path.join(hcpconfpath, os.listdir(hcpconfpath)[0])
    with open(hcpconfig) as hcpconf:
        job_config2 = json.load(hcpconf)
    config2 = job_config2['config']
    
    subject_id = config2['Subject']
    RegName = config2['RegName']
    ldogSurfaceAndCalculations = 'Na'

elif dataSourceType == 'ldogfix':  
    # Create a folder for ldog subject text file
    subjecttext = '/tmp/subjectPathFolder'
    os.system('mkdir %s' % subjecttext)
    os.system('unzip -j %s \'subject_id.txt\' -d %s' % (struct_zip_path, subjecttext))
    textfile = os.path.join(subjecttext, os.listdir(subjecttext)[0])
    with open (textfile, 'r') as idfile:
        subject_id = idfile.readlines()[0]
    RegName = 'Na'
   
    # Set paths to the surface items (mesh, calculations, etc.) and unzip
    ldogSurfaceAndCalculations = '/tmp/surface_items' #ldog_surface_calculations_folder
    os.system('mkdir %s' % ldogSurfaceAndCalculations)
    os.system('unzip -j %s Atlas/exvivo_warp_files.zip -d %s' % (struct_zip_path, ldogSurfaceAndCalculations))
    os.system('unzip -j %s Atlas/Woofsurfer.zip -d %s' % (struct_zip_path, ldogSurfaceAndCalculations))    
    os.system('unzip -q %s/Woofsurfer.zip -d %s/' % (ldogSurfaceAndCalculations, ldogSurfaceAndCalculations))
    os.system('unzip -q %s/exvivo_warp_files.zip -d %s/' % (ldogSurfaceAndCalculations, ldogSurfaceAndCalculations))    

elif dataSourceType == 'vol2surf':  
    ldogSurfaceAndCalculations = 'Na'
    RegName = 'Na'
    # Get the subject id by looking between sub and ses for fmriprep stuff
    if 'sub-' in func_images[0] and '_ses' in func_images[0]:
        subject_id =  (func_images[0].split('sub-'))[1].split('_ses')[0]
    else:
        subject_id = 'Subject'
######################### Run Algorithm #######################################
    
cmd = """%s %s -mcruserdata ParallelProfile:/usr/flywheel.mlsettings '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' 'maskFilePath' '%s' \
'payloadPath' '%s' 'dataFileType' '%s' 'dataSourceType' '%s' \
'trimDummyStimTRs' '%s' 'averageAcquisitions' '%s' 'tr' '%s' \
'externalMGZMakerPath' '%s' 'RegName' '%s' 'modelClass' '%s' 'modelOpts' '%s' \
'workbenchPath' '%s' 'outPath' '%s' 'flywheelFlag' '1' 'Subject' '%s' 'averageVoxels' '%s' externalMapGifMakerPath '%s' externalSurfaceMakerPath '%s' \
'externalHtmlMakerPath' '%s' externalCiftiSurfaceMakerPath '%s' ldogSurfaceAndCalculations '%s' padTruncatedTRs '%s' externalCiftiToFreesurferPath '%s' freesurferInstallationPath '%s' standardMeshAtlasesFolder '%s' workDir '%s' 'pseudoHemiAnalysis' '%s' 'convertToPercentChange' '%s'""" % (matlab_func, mcr_path, func_images[0], func_images[1], func_images[2], func_images[3], func_images[4], 
                                                                                                                                                                                                                                                                                                  func_images[5], func_images[6], func_images[7], func_images[8], func_images[9], func_images[10],
                                                                                                                                                                                                                                                                                                  func_images[11], func_images[12], func_images[13], func_images[14], func_images[15], 
                                                                                                                                                                                                                                                                                                  func_images[16], func_images[17], func_images[18], func_images[19], func_images[20],
                                                                                                                                                                                                                                                                                                  func_images[21], func_images[22], func_images[23], func_images[24], func_images[25],
                                                                                                                                                                                                                                                                                                  func_images[26], func_images[27], func_images[28], func_images[29], func_images[30],
                                                                                                                                                                                                                                                                                                  func_images[31], func_images[32], func_images[33], func_images[34], func_images[35], stim_file_path, 
                                                                                                                                                                                                                                                                                                  struct_zip_path, mask_file_path, payload_file_path, dataFileType, dataSourceType, trimDummyStimTRs, 
                                                                                                                                                                                                                                                                                                  averageAcquisitions, tr, externalMGZMakerPath, RegName, modelClass, modelOpts, workbench_path, first_output_dir, 
                                                                                                                                                                                                                                                                                                  subject_id, averageVoxels, externalMapGifMakerPath, externalSurfaceMakerPath, externalHtmlMakerPath, externalCiftiSurfaceMakerPath,
                                                                                                                                                                                                                                                                                                  ldogSurfaceAndCalculations, padTruncatedTRs, externalCiftiToFreesurferPath, freesurferInstallationPath, standardMeshAtlasesFolder, external_workdir, pseudoHemiAnalysis, convertToPercentChange)

os.system(cmd)        

################### Zip everything and output #################################

# Move mat and pdf to the final output directory
for i in os.listdir(first_output_dir):
    if os.path.splitext(i)[-1].lower() == '.mat' or os.path.splitext(i)[-1].lower() == '.pdf':
        os.system('mv %s %s/'%(os.path.join(first_output_dir, i), final_output_dir)) 
 
# Move the folders containing any mri image files to the final output     
if os.path.exists((os.path.join(first_output_dir,'%s_maps_cifti' % subject_id))):
    os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_cifti' % subject_id), os.path.join(final_output_dir,'%s_maps_cifti.zip' % subject_id)))
if os.path.exists((os.path.join(first_output_dir,'%s_maps_nativeMGZ' % subject_id))):
    os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_nativeMGZ' % subject_id), os.path.join(final_output_dir,'%s_maps_nativeMGZ.zip' % subject_id)))
if os.path.exists((os.path.join(first_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere' % subject_id))):    
    os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere' % subject_id), os.path.join(final_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere.zip' % subject_id)))
if os.path.exists((os.path.join(first_output_dir,'%s_maps_volumetric' % subject_id))):
    os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_volumetric' % subject_id), os.path.join(final_output_dir,'%s_maps_volumetric.zip' % subject_id)))

# If the icafix or vol2surf protocol is used, move the brain plots directly to the final output folder     
if dataSourceType == 'icafix' or dataSourceType == 'vol2surf':
    for i in os.listdir(first_output_dir):
        if os.path.splitext(i)[-1].lower() == '.png':
            os.system('mv %s %s/'%(os.path.join(first_output_dir, i), final_output_dir))

# If ldog protocol is used create an html from the brain plots
if dataSourceType == 'ldogfix':   
    images_folder = os.path.join(first_output_dir, 'images')
    os.system('mkdir %s' % images_folder)
    os.system('cd %s; mv *.png *.gif %s' % (first_output_dir, images_folder))    
    os.system('cd %s; zip -q -r %s images *.html' % (first_output_dir, os.path.join(final_output_dir, subject_id + '_results.html.zip')))
